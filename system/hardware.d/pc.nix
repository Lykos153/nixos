# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  networking.hostName = "silvio-pc";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  boot.kernelParams = [ "amd_iommu=on" "pcie_acs_override=downstream,multifunction" ];
  boot.extraModprobeConfig = "options vfio-pci ids=10de:1380,10de:0fbc";
  boot.kernelPackages = pkgs.linuxPackages_5_10;
  nixpkgs.config.packageOverrides = pkgs: {
      linux_5_10 = pkgs.linux_5_10.override {
        kernelPatches = pkgs.linux_5_10.kernelPatches ++ [
          { name = "acs";
            patch = pkgs.fetchurl {
              url = "https://aur.archlinux.org/cgit/aur.git/plain/add-acs-overrides.patch?h=linux-vfio&id=5c88f2651e21831bd92bcf856254d7cc20cb1bde";
              sha256 = "b90be7b79652be61f7d50691000f6a8c75a240dc2eee2667b68d984f67583f77";
            };
          }
        ];
      };
    };

  fileSystems."/" =
    { device = "/dev/mapper/arch-root";
      fsType = "btrfs";
      options = [ "subvol=nixos" ];
    };
  fileSystems."/btrfs" =
    { device = "/dev/mapper/arch-root";
      fsType = "btrfs";
      options = [ "subvol=/" ];
    };
  fileSystems."/boot".device = "/dev/disk/by-uuid/9E7D-E776";

  boot.initrd.luks.devices."arch-root".device = "/dev/disk/by-uuid/b474463d-7d93-4abf-95cd-35db2f9a6490";
  boot.initrd.luks.devices."arch-root2".device = "/dev/disk/by-uuid/efae7e7f-5c77-4957-9a75-f2862e620d15";
  boot.initrd.luks.devices."arch-root3".device = "/dev/disk/by-uuid/d55b7110-02b2-47fd-9441-bf53c67eeccc";

  swapDevices = [ ];

  powerManagement.cpuFreqGovernor = lib.mkDefault "ondemand";

  virtualisation = {
    libvirtd = {
      enable = true;
      qemu.ovmf.enable = true;
    };
  };
}
