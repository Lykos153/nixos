#!/usr/bin/env python3

from timewreport.parser import TimeWarriorParser
from timewreport.interval import TimeWarriorInterval
import datetime
from tabulate import tabulate
import sys
import os
from collections import defaultdict
from typing import Tuple


def fill_buckets(
    bucket_names: list[str],
    intervals: list[TimeWarriorInterval],
    ignore_tags: list[str] = [],
) -> (dict[str, list[TimeWarriorInterval]], list[TimeWarriorInterval]):

    ignore = set(ignore_tags)
    buckets: dict[str, list[TimeWarriorInterval]] = {}
    for b in bucket_names:
        buckets[b] = []
    other: list[TimeWarriorInterval] = []

    i: TimeWarriorInterval
    for i in intervals:
        if not set(i.get_tags()).isdisjoint(ignore):
            continue
        for b in buckets:
            # find first match, so no interval is counted twice
            if b in i.get_tags():
                buckets[b].append(i)
                break
        else:
            other.append(i)
    return buckets, other


def time_per_day(
    bucket: list[TimeWarriorInterval],
) -> dict[datetime.date, datetime.timedelta]:

    hours = defaultdict(datetime.timedelta)
    for interval in bucket:
        hours[interval.get_start_date()] += interval.get_duration()
    return hours


def delta_to_hhmmss(delta: datetime.timedelta) -> str:
    hours, rest = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(rest, 60)
    hours += delta.days * 24
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"


def print_time_per_day(hours: dict[datetime.date, datetime.timedelta]) -> None:
    def sorted_time_per_day(hours: dict[datetime.date, datetime.timedelta]):
        total = datetime.timedelta()
        for day in sorted(hours):
            total += hours[day]
            yield (day.isoformat(), delta_to_hhmmss(hours[day]))
        yield ("", "")
        yield ("Total", delta_to_hhmmss(total))

    print(tabulate(sorted_time_per_day(hours), headers=("Day", "Hours")))


def tag_union(intervals: list[TimeWarriorInterval]) -> set[str]:
    tags: list[str] = []
    for i in intervals:
        tags.extend(i.get_tags())
    return set(tags)


def print_intervals(intervals: list[TimeWarriorInterval]) -> None:
    times: list[Tuple[str, str, str]] = []
    total = datetime.timedelta()
    i: TimeWarriorInterval
    for i, current in enumerate(intervals):
        times.append(
            (
                current.get_start_date().isoformat()
                if i == 0
                or intervals[i - 1].get_start_date() != current.get_start_date()
                else "",
                " ".join(current.get_tags()),
                delta_to_hhmmss(current.get_duration()),
            )
        )
        total += current.get_duration()
    times.append(("", "", ""))
    times.append(("Total", "", delta_to_hhmmss(total)))
    print(tabulate(times, headers=("Day", "Tags", "Hours")))


if __name__ == "__main__":
    parser = TimeWarriorParser(sys.stdin)

    bucket_names = os.environ.get("TIMEWARRIOR_HOURS_BUCKETS", "").split()
    ignore_tags = os.environ.get("TIMEWARRIOR_HOURS_IGNORE", "").split()

    config = parser.get_config()
    if not bucket_names:
        bucket_names = config.get_value("hours.buckets", "").split()
    if not ignore_tags:
        ignore_tags = config.get_value("hours.ignore", "").split()
    buckets, other = fill_buckets(
        bucket_names, parser.get_intervals(), ignore_tags=ignore_tags
    )

    for b in buckets:
        if len(buckets[b]) == 0:
            continue
        print(f"== Bucket {b} ==")
        print_time_per_day(time_per_day(buckets[b]))
        print("\n")
    if len(other) != 0:
        print("== Other ==")
        print_intervals(other)
